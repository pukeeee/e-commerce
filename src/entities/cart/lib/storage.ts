/**
 * @file Цей файл надає універсальний та безпечний спосіб взаємодії з `localStorage`.
 * Він використовує патерн "Адаптер", щоб ізолювати логіку роботи зі сховищем
 * від решти бізнес-логіки додатка.
 */

/**
 * @description Описує універсальний контракт (інтерфейс) для будь-якого сховища.
 * Це дозволяє в майбутньому легко замінити localStorage на інше сховище (наприклад, sessionStorage),
 * не змінюючи код, який використовує цей адаптер.
 */
export type StorageAdapter = {
  /**
   * @property Ключ, за яким дані зберігаються у сховищі.
   */
  key: string;
  /**
   * @method Метод для читання даних зі сховища.
   * @returns Повертає `unknown`, оскільки ми не знаємо наперед тип даних. Це безпечніше, ніж `any`.
   */
  read: () => unknown;
  /**
   * @method Метод для запису даних у сховище.
   * @param payload Дані для запису. Можуть бути будь-якого типу, що серіалізується.
   */
  write: (payload: unknown) => void;
};

/**
 * @description Фабрична функція для створення безпечного адаптера для `localStorage`.
 * "Фабрична", тому що вона "виробляє" об'єкт адаптера з заданою конфігурацією.
 * @param key Ключ, який буде використовуватись для доступу до `localStorage`. За замовчуванням 'cart'.
 * @returns Повертає об'єкт, що реалізує інтерфейс `StorageAdapter`.
 */
export const createLocalStorageAdapter = (key = "cart"): StorageAdapter => ({
  key,
  read: () => {
    // --- 1. Захист від виконання на сервері (SSR/RSC) ---
    // У середовищах Next.js, де код може виконуватись на сервері, об'єкта `window` не існує.
    // Ця перевірка запобігає падінню додатка під час серверного рендерингу.
    if (typeof window === "undefined") {
      return null;
    }

    // --- 2. Безпечне читання даних ---
    try {
      // Отримуємо дані з localStorage у вигляді рядка.
      const raw = window.localStorage.getItem(key);

      // Якщо дані існують, парсимо їх з JSON-рядка в об'єкт.
      // Якщо ні - повертаємо null.
      return raw ? JSON.parse(raw) : null;
    } catch (e) {
      console.error(`Помилка читання зі сховища для ключа "${key}":`, e);
      // У разі помилки повертаємо null, щоб не зламати додаток
      return null;
    }
  },
  write: (payload) => {
    // --- 1. Захист від виконання на сервері ---
    // Запис, як і читання, можливий тільки в браузері.
    if (typeof window === "undefined") {
      return;
    }

    // --- 2. Безпечний запис даних ---
    try {
      // --- Обробка очищення сховища ---
      // Якщо в `payload` передано `null` або `undefined`, це сигнал, що потрібно очистити
      // дані за цим ключем. `payload == null` - це коротка перевірка на обидва ці значення.
      if (payload == null) {
        return window.localStorage.removeItem(key);
      }

      // --- Запис даних ---
      // Перетворюємо об'єкт `payload` на JSON-рядок перед збереженням.
      const dataToWrite = JSON.stringify(payload);
      window.localStorage.setItem(key, dataToWrite);
    } catch (e) {
      // Ловимо можливі помилки запису. Наприклад, якщо сховище переповнене (ліміт ~5MB).
      console.error(`Помилка запису в сховище для ключа "${key}":`, e);
    }
  },
});
